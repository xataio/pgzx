#!/usr/bin/env bash

set -e
set -x
set -o pipefail

# store multiline usage string
USAGE="
PostgreSQL script to relocate a local installation to another folder.

WARNING: This script copies the bin, include, and lib folders. If you relocate
         a PostgreSQL installation from a system folder this script might copy
         all other binaries, headers, and libraries from the system folder.

         Ideally pglocal should be used to relocate a local installation only.
         A postgres installation in the Nix store is isolated and can safely be
         relocated for local testing.

Usage: $0 [outdir]
  outdir: output directory for the local installation
          default: out
"

POSITIONAL_ARGS=()
while [[ $# -gt 0 ]]; do
	case $1 in
		-h)
			echo "$USAGE"
			exit 0
			;;
		--* | -*)
			echo "Unknown option $1"
			echo "$USAGE"
			exit 1
			;;
		*)
			POSITIONAL_ARGS+=("$1") # save positional arg
			shift                   # past argument
			;;
	esac
done
set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

# Ignore nix specific env var so we can ask pg_config for the correct paths
unset NIX_PGLIBDIR

PG_CONFIG=$(which pg_config)

rootdir=${PRJ_ROOT:-$(git rev-parse --show-toplevel)}
outdir=${1:-$rootdir/out}

postgres_major_version=$($PG_CONFIG --version | awk '{print $2}' | sed 's/\..*$//')
new_install_dir=$outdir/$postgres_major_version

cp_direct_files() {
	local dest_dir=$1
	local src_dir=$2
	mkdir -p "$dest_dir"

	# prepare sub directories in the destination directory to ensure write permissions.
	find "$src_dir" -type d -printf '%P\n' | while read -r dir; do
		target="${dest_dir}/${dir}"
		mkdir -p "$target" && chmod u+w "$target" || return 1
	done

	# # copy the actual files only
	find "$src_dir" -maxdepth 1 -type f | while read -r file; do
		cp "$file" "$dest_dir" || return 1
	done

	# create symlinks
	find "$src_dir" -maxdepth 1 -type l | while read -r link; do
		ln -s "$(realpath "$link")" "$dest_dir/$(basename "$link")" || return 1
	done
}

cp_recursive() {
	local dest_dir=$1
	local src_dir=$2
	mkdir -p "$dest_dir"

	if [ ! -d "$src_dir" ]; then
		return 0
	fi

	# prepare sub directories in the destination directory to ensure write permissions.
	find "$src_dir" -type d -printf '%P\n' | while read -r dir; do
		target="${dest_dir}/${dir}"
		mkdir -p "$target" && chmod u+w "$target" || return 1
	done

	# copy the actual files only
	find "$src_dir" -type f -printf '%P\n' | while read -r file; do
		cp -r "$src_dir/$file" "$dest_dir/$file" || return 1
	done
}

mkdir -p "$new_install_dir"

# copy bin
mkdir -p "$new_install_dir/bin"
cp_direct_files "$new_install_dir/bin" "$("$PG_CONFIG" --bindir)"

# copy headers from include dir
mkdir -p "$new_install_dir/include"
mkdir -p "$new_install_dir/include/server"
(
	"$PG_CONFIG" --includedir
	"$PG_CONFIG" --pkgincludedir
) | sort -u | while read -r dir; do
	cp_direct_files "$new_install_dir/include" "$dir"
done
cp_recursive "$new_install_dir/include/server" "$("$PG_CONFIG" --includedir-server)"

# In nix the actual lib directory reported by pg_config is overwritten.
# We check if the lib directory derived from the bindir exists and if that directory
# differs from the libdir reported by pg_config. If they differ must copy those files
# to ensure we have a complete local installation including pgxs based tooling.
pg_derived_libdir=$(realpath "$("$PG_CONFIG" --bindir)/../lib")
if [ -d "$pg_derived_libdir" ]; then
	if [ "$(realpath "$("$PG_CONFIG" --libdir)")" != "$pg_derived_libdir" ]; then
		cp_recursive "$new_install_dir/lib" "$pg_derived_libdir"
	fi
fi

# copy from libdirs reporter by pg_config
(
	"$PG_CONFIG" --libdir
	"$PG_CONFIG" --pkglibdir
) | sort -u | while read -r dir; do
	cp_direct_files "$new_install_dir/lib" "$dir"
done
cp_recursive "$new_install_dir/lib/pkgconfig" "$($PG_CONFIG --pkglibdir)/pkgconfig"
cp_recursive "$new_install_dir/lib/postgresql" "$($PG_CONFIG --pkglibdir)/postgresql"

# copy locale
cp_recursive "$new_install_dir/share/locale" "$($PG_CONFIG --localedir)"

# copy share
cp_recursive "$new_install_dir/share/postgresql" "$($PG_CONFIG --sharedir)"

chmod -R +w "$new_install_dir"

# link outdir/default if not exists
if [ ! -e "$outdir/default" ]; then
	ln -s "$new_install_dir" "$outdir/default"
fi
